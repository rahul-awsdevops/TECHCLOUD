pipeline {
    agent any

    environment {
        REGISTRY = "676206914267.dkr.ecr.us-east-1.amazonaws.com"
        BACKEND_REPO = "techcloud-academy-backend-apps"
        FRONTEND_REPO = "techcloud-academy-frontend-apps"
        AWS_REGION = "us-east-1"
        SONAR_HOST_URL = "http://sonarqube.yourcompany.com"
        SONAR_PROJECT_KEY_BACKEND = "backend-app"
        SONAR_PROJECT_KEY_FRONTEND = "frontend-app"
        SONAR_TOKEN = credentials('sonar-token')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                    COMMIT_ID = sh(script: "git rev-parse --short=7 HEAD", returnStdout: true).trim()
                    env.COMMIT_ID = COMMIT_ID
                    echo "Using Commit ID: ${COMMIT_ID}"
                }
            }
        }

        stage('SonarQube - Backend') {
            steps {
                dir('techcloud-academy-backend') {
                    withSonarQubeEnv('SonarQube') {
                        sh """
                        sonar-scanner \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND} \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }

        stage('SonarQube - Frontend') {
            steps {
                dir('techcloud-academy-frontend') {
                    withSonarQubeEnv('SonarQube') {
                        sh """
                        sonar-scanner \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND} \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Build & Push Backend') {
            steps {
                dir('techcloud-academy-backend') {
                    sh """
                    docker build -t ${REGISTRY}/${BACKEND_REPO}:${COMMIT_ID} .
                    trivy image --exit-code 1 --severity HIGH,CRITICAL ${REGISTRY}/${BACKEND_REPO}:${COMMIT_ID} || true
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${REGISTRY}
                    docker push ${REGISTRY}/${BACKEND_REPO}:${COMMIT_ID}
                    """
                }
            }
        }

        stage('Build & Push Frontend') {
            steps {
                dir('techcloud-academy-frontend') {
                    sh """
                    docker build --build-arg API_BACKEND_URL=nodejs-app-backend-service.default.svc.cluster.local --build-arg API_BACKEND_PORT=3000 -t ${REGISTRY}/${FRONTEND_REPO}:${COMMIT_ID} .
                    trivy image --exit-code 1 --severity HIGH,CRITICAL ${REGISTRY}/${FRONTEND_REPO}:${COMMIT_ID} || true
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${REGISTRY}
                    docker push ${REGISTRY}/${FRONTEND_REPO}:${COMMIT_ID}
                    """
                }
            }
        }
        stage('Artifact - Upload to S3') {
            steps {
                script {
                    sh """
                    mkdir -p artifacts/${COMMIT_ID}
                    cp -r aws-eks-kube-manifests/* artifacts/${COMMIT_ID}/
                    cd artifacts
                    zip -r ${COMMIT_ID}.zip ${COMMIT_ID}/
                    aws s3 cp ${COMMIT_ID}.zip s3://${ARTIFACT_BUCKET}/artifacts/${COMMIT_ID}.zip --region ${AWS_REGION}
                    """
                    echo "Artifact uploaded to s3://${ARTIFACT_BUCKET}/artifacts/${COMMIT_ID}.zip"
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                sh """
                sed -i "s|:latest|:${COMMIT_ID}|g" aws-eks-kube-manifests/nodejs-app-deployment.yml
                sed -i "s|:latest|:${COMMIT_ID}|g" aws-eks-kube-manifests/react-frontend-deployment.yml
                kubectl apply -f aws-eks-kube-manifests/
                git add k8s/frontend-deployment.yaml k8s/backend-deployment.yaml
                git commit -m "Updated image tags to ${BUILD_ID}"
                git push origin main
                """
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

stage('Code Analysis') {
    parallel {
        stage('SonarQube - Backend') { ... }
        stage('SonarQube - Frontend') { ... }
    }
}
